!function(e,n,t,r){(t=e.createElement(n)).async=1,t.src="//"+(location.host||"localhost").split(":")[0]+":35729/livereload.js?snipver=1",(r=e.getElementsByTagName(n)[0]).parentNode.insertBefore(t,r)}(document,"script"),function(){"use strict";function t(e,n){for(var t=[],r=[],o=arguments.length;2<o--;)t.push(arguments[o]);for(;t.length;){var i=t.pop();if(i&&i.pop)for(o=i.length;o--;)t.push(i[o]);else null!=i&&!0!==i&&!1!==i&&r.push(i)}return"function"==typeof e?e(n||{},r):{nodeName:e,attributes:n||{},children:r,key:n&&n.key}}function c(e,n,t,r){return{isExact:e,path:n,url:t,params:r}}function s(e){for(var n=e.length;"/"===e[--n];);return e.slice(0,n+1)}function f(n){try{return decodeURIComponent(n)}catch(e){return n}}function r(o){return function(e,n){var t=e.location,r=function(e,n,t){if(e===n||!e)return c(e===n,e,n);var r=t&&t.exact,o=s(e).split("/"),i=s(n).split("/");if(!(o.length>i.length||r&&o.length<i.length)){var u=0,a={},l=o.length;for(n="";u<l;u++){if(":"===o[u][0])a[o[u].slice(1)]=i[u]=f(i[u]);else if(o[u]!==i[u])return;n+=i[u]+"/"}return c(!1,e,n.slice(0,-1),a)}}(o.path,t.pathname,{exact:!o.parent});return r&&o.render({match:r,location:t})}}function o(e,o){return function(e,n){for(var t,r=0;!(t=o[r]&&o[r](e,n))&&r<o.length;)r++;return t}}var e={state:{pathname:window.location.pathname,previous:window.location.pathname},actions:{go:function(e){history.pushState(null,"",e)},set:function(e){return e}},subscribe:function(n){function e(e){n.set({pathname:window.location.pathname,previous:e.detail?window.location.previous=e.detail:window.location.previous})}var t=["pushState","replaceState"].reduce(function(e,n){var r=history[n];return history[n]=function(e,n,t){r.call(this,e,n,t),dispatchEvent(new CustomEvent("pushstate",{detail:e}))},function(){history[n]=r,e&&e()}},null);return addEventListener("pushstate",e),addEventListener("popstate",e),function(){removeEventListener("pushstate",e),removeEventListener("popstate",e),t()}}},i=function(){return t("h2",null,"About")},n=function(e,n,t,r){var o,i=[].map,u=r&&r.children[0]||null,a=u&&function n(e){return{nodeName:e.nodeName.toLowerCase(),attributes:{},children:i.call(e.childNodes,function(e){return 3===e.nodeType?e.nodeValue:n(e)})}}(u),g=[],y=!0,l=w(e),c=function e(r,o,i){for(var n in i)"function"==typeof i[n]?function(e,t){i[e]=function(e){var n=t(e);return"function"==typeof n&&(n=n(d(r,l),i)),n&&n!==(o=d(r,l))&&!n.then&&f(l=h(r,w(o,n),l)),n}}(n,i[n]):e(r.concat(n),o[n]=w(o[n]),i[n]=w(i[n]));return i}([],l,w(n));return f(),c;function b(e){return"function"==typeof e?b(e(l,c)):null!=e?e:""}function s(){o=!o;var e=b(t);for(r&&!o&&(u=function e(n,t,r,o,i){if(o===r);else if(null==r||r.nodeName!==o.nodeName){var u=function e(n,t){var r="string"==typeof n||"number"==typeof n?document.createTextNode(n):(t=t||"svg"===n.nodeName)?document.createElementNS("http://www.w3.org/2000/svg",n.nodeName):document.createElement(n.nodeName),o=n.attributes;if(o){o.oncreate&&g.push(function(){o.oncreate(r)});for(var i=0;i<n.children.length;i++)r.appendChild(e(n.children[i]=b(n.children[i]),t));for(var u in o)E(r,u,o[u],null,t)}return r}(o,i);n.insertBefore(u,t),null!=r&&L(n,t,r),t=u}else if(null==r.nodeName)t.nodeValue=o;else{!function(e,n,t,r){for(var o in w(n,t))t[o]!==("value"===o||"checked"===o?e[o]:n[o])&&E(e,o,t[o],n[o],r);var i=y?t.oncreate:t.onupdate;i&&g.push(function(){i(e,n)})}(t,r.attributes,o.attributes,i=i||"svg"===o.nodeName);for(var a={},l={},c=[],s=r.children,f=o.children,h=0;h<s.length;h++){c[h]=t.childNodes[h];var d=N(s[h]);null!=d&&(a[d]=[c[h],s[h]])}for(var h=0,v=0;v<f.length;){var d=N(s[h]),p=N(f[v]=b(f[v]));if(l[d])h++;else if(null==p||y)null==d&&(e(t,c[h],s[h],f[v],i),v++),h++;else{var m=a[p]||[];d===p?(e(t,m[0],m[1],f[v],i),h++):m[0]?e(t,t.insertBefore(m[0],c[h]),m[1],f[v],i):e(t,c[h],null,f[v],i),l[p]=f[v],v++}}for(;h<s.length;)null==N(s[h])&&L(t,c[h],s[h]),h++;for(var h in a)l[h]||L(t,a[h][0],a[h][1])}return t}(r,u,a,a=e)),y=!1;g.length;)g.pop()()}function f(){o||(o=!0,setTimeout(s))}function w(e,n){var t={};for(var r in e)t[r]=e[r];for(var r in n)t[r]=n[r];return t}function h(e,n,t){var r={};return e.length?(r[e[0]]=1<e.length?h(e.slice(1),n,t[e[0]]):n,w(t,r)):n}function d(e,n){for(var t=0;t<e.length;)n=n[e[t++]];return n}function N(e){return e?e.key:null}function v(e){return e.currentTarget.events[e.type](e)}function E(e,n,t,r,o){if("key"===n);else if("style"===n)for(var i in w(r,t)){var u=null==t||null==t[i]?"":t[i];"-"===i[0]?e[n].setProperty(i,u):e[n][i]=u}else"o"===n[0]&&"n"===n[1]?(n=n.slice(2),e.events?r||(r=e.events[n]):e.events={},(e.events[n]=t)?r||e.addEventListener(n,v):e.removeEventListener(n,v)):n in e&&"list"!==n&&!o?e[n]=null==t?"":t:null!=t&&!1!==t&&e.setAttribute(n,t),null!=t&&!1!==t||e.removeAttribute(n)}function L(e,n,t){function r(){e.removeChild(function e(n,t){var r=t.attributes;if(r){for(var o=0;o<t.children.length;o++)e(n.childNodes[o],t.children[o]);r.ondestroy&&r.ondestroy(n)}return n}(n,t))}var o=t.attributes&&t.attributes.onremove;o?o(n,r):r()}}({location:e.state},{location:e.actions},function(e,n){return t("div",null,t(o,null,t(r,{path:"/Mware/",render:i})))},document.body);e.subscribe(n.location)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
